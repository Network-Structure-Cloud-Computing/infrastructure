---
AWSTemplateFormatVersion: "2010-09-09"

Description: Assignment 3

Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: "String"
    Default: "10.0.0.0/16"

  NumberOfSubnets:
    Description: Number of Subnets to be created
    Type: String
    Default: "3"

  SubnetOffset:
    Description: Offest of Subnet from CIDR
    Type: String
    Default: "8"

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: "18"
    MinLength: "9"
    Type: String

  DestinationCidrBlockPublic:
    Description: Public IP Address
    Type: String
    Default: "0.0.0.0/0"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - MyVPC

  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - InternetGateWay

  InternetGateWayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateWay
      VpcId: !Ref MyVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref DestinationCidrBlockPublic
      GatewayId: !Ref InternetGateWay

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC 
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      CidrBlock: !Select [0, !Cidr [!GetAtt MyVPC.CidrBlock, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - PublicSubnet1

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC 
      AvailabilityZone: !Select [ 1, !GetAZs ""]
      CidrBlock: !Select [1, !Cidr [!GetAtt MyVPC.CidrBlock, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - PublicSubnet2

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC 
      AvailabilityZone: !Select [ 2, !GetAZs ""]
      CidrBlock: !Select [2, !Cidr [!GetAtt MyVPC.CidrBlock, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName} - PublicSubnet3

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

Outputs:
  VpcId:
    Description: "VPC ID"
    Value: !Ref MyVPC

  PublicSubnets:
      Description: Public Subnets
      Value: !Join [ ", ", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]

  PublicSubnet1:
      Description: Public Subnet AZ1
      Value: !Ref PublicSubnet1

  PublicSubnet2:
      Description: Public Subnet AZ2
      Value: !Ref PublicSubnet2

  PublicSubnet3:
      Description: Public Subnet AZ2
      Value: !Ref PublicSubnet3

  PublicRouteTable:
      Description: Public Route Table
      Value: !Ref PublicRouteTable
      
  InternetGateWay:
      Description: Internet GateWay
      Value: !Ref InternetGateWay